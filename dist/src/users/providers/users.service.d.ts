import { CreateUserDto } from '../dtos/create-user.dto';
import { PatchUserDto } from '../dtos/patch-user.dto';
import { User } from '../user.entity';
import { Repository } from 'typeorm';
import { HashingProvider } from '../../auth/providers/hashing.provider';
import { PaginationProvider } from '../../common/pagination/providers/pagination.provider';
import { FindOneByGoogleIdProvider } from './find-one-by-google-id.provider';
import { CreateGoogleUserProvider } from './create-google-user.provider';
import { GoogleUser } from '../interfaces/google-user.interface';
import { SearchProvider } from '../../common/search/providers/search.provider';
import { FilterProvider } from '../../common/filter/providers/filter.provider';
import { StatusType } from '../../common/statusType.enum';
import { PaginationQueryDto } from '../../common/pagination/dtos/pagination-query.dto';
import { GetUserDto } from '../dtos/get-user.dto';
export declare class UserService {
    private readonly userRepository;
    private readonly hashingProvider;
    private readonly paginationProvider;
    private readonly searchProvider;
    private readonly filterProvider;
    private readonly findOneByGoogleIdProvider;
    private readonly createGoogleUserProvider;
    constructor(userRepository: Repository<User>, hashingProvider: HashingProvider, paginationProvider: PaginationProvider, searchProvider: SearchProvider, filterProvider: FilterProvider, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider);
    findAll(limit: number, page: number): Promise<import("../../common/pagination/interfaces/paginated.interface").Paginated<User>>;
    findUserById(id: string): Promise<User>;
    getAllCustomers(limit: number, page: number, status: StatusType): Promise<import("../../common/pagination/interfaces/paginated.interface").Paginated<User>>;
    filterUsers(limit: number, page: number, filterUserDto: GetUserDto): Promise<import("../../common/pagination/interfaces/paginated.interface").Paginated<User>>;
    countUsers(query: Record<string, string>): Promise<number>;
    searchUsers(paginationQuery: PaginationQueryDto, fields: string[], query: string): Promise<import("../../common/pagination/interfaces/paginated.interface").Paginated<User>>;
    createUser(createUserDto: CreateUserDto): Promise<User>;
    findOneByEmail(email: string): Promise<User>;
    updateUser(id: string, patchUserDto: PatchUserDto): Promise<import("typeorm").UpdateResult>;
    deleteUser(id: string): Promise<import("typeorm").DeleteResult>;
    findOneByGoogleId(googleId: string): Promise<User>;
    createGoogleUser(googleUser: GoogleUser): Promise<User>;
}
